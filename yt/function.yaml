metadata:
  name: youtubecomments
  labels:
    nuclio.io/project-name: default
spec:
  handler: "main:handler"
  runtime: "python:3.9"
  env:
    - name: KAFKA_BROKER
      valueFrom:
        secretKeyRef:
          name: kafkacredentials
          key: broker_url
    - name: MINIO_HOME
      valueFrom:
        secretKeyRef:
          name: miniocredentials
          key: miniohome
    - name: MINIO_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: miniocredentials
          key: accesskey
    - name: MINIO_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: miniocredentials
          key: secretkey
    - name: YOUTUBE_API_KEY
      valueFrom:
        secretKeyRef:
          name: youtubecredentials
          key: apikey
  resources:
    requests:
      cpu: 25m
      memory: 1Mi
  imageHash: "1699001961834870203"
  triggers:
    default-http:
      class: ""
      kind: http
      name: default-http
      maxWorkers: 1
      attributes:
        serviceType: ClusterIP
    kafka-trigger:
      class: ""
      kind: kafka-cluster
      name: kafka-trigger
      maxWorkers: 1
      explicitAckMode: disable
      workerTerminationTimeout: 5s
      attributes:
        brokers:
          - 'my-cluster-kafka-brokers.kafka:9092'
        consumerGroup: group2
        fetchDefault: 1048576
        heartbeatInterval: 3s
        initialOffset: latest
        maxWaitHandlerDuringRebalance: 5s
        rebalanceTimeout: 60s
        sasl:
          enable: false
          password: ""
          user: ""
        sessionTimeout: 10s
        topics:
          - youtube
        workerAllocationMode: pool
  version: 1
  alias: latest
  build:
    functionSourceCode: aW1wb3J0IGpzb24NCmltcG9ydCBvcw0KDQpmcm9tIG1pbmlvIGltcG9ydCBNaW5pbw0KZnJvbSByZXF1ZXN0cyBpbXBvcnQgSFRUUEVycm9yDQpmcm9tIGthZmthIGltcG9ydCBLYWZrYVByb2R1Y2VyDQpmcm9tIGdvb2dsZWFwaWNsaWVudC5kaXNjb3ZlcnkgaW1wb3J0IGJ1aWxkDQoNCg0KZGVmIGluaXRfY29udGV4dChjb250ZXh0KToNCiAgICBjbGllbnQgPSBNaW5pbygNCiAgICAgICAgb3MuZW52aXJvbi5nZXQoIk1JTklPX0hPTUUiKSwNCiAgICAgICAgYWNjZXNzX2tleT1vcy5lbnZpcm9uLmdldCgiTUlOSU9fQUNDRVNTX0tFWSIpLA0KICAgICAgICBzZWNyZXRfa2V5PW9zLmVudmlyb24uZ2V0KCJNSU5JT19TRUNSRVRfS0VZIiksDQogICAgICAgIHNlY3VyZT1GYWxzZSwNCiAgICApDQoNCiAgICBwcm9kdWNlciA9IEthZmthUHJvZHVjZXIoDQogICAgICAgIGJvb3RzdHJhcF9zZXJ2ZXJzPVtvcy5lbnZpcm9uLmdldCgiS0FGS0FfQlJPS0VSIildLA0KICAgICAgICB2YWx1ZV9zZXJpYWxpemVyPWxhbWJkYSB4OiBqc29uLmR1bXBzKHgpLmVuY29kZSgidXRmLTgiKSwNCiAgICApDQoNCiAgICBhcGlfa2V5ID0gb3MuZW52aXJvbi5nZXQoIllPVVRVQkVfQVBJX0tFWSIpDQogICAgeW91dHViZSA9IGJ1aWxkKCJ5b3V0dWJlIiwgInYzIiwgZGV2ZWxvcGVyS2V5PWFwaV9rZXkpDQoNCiAgICBzZXRhdHRyKGNvbnRleHQsICJwcm9kdWNlciIsIHByb2R1Y2VyKQ0KICAgIHNldGF0dHIoY29udGV4dCwgImNsaWVudCIsIGNsaWVudCkNCiAgICBzZXRhdHRyKGNvbnRleHQsICJ5b3V0dWJlIiwgeW91dHViZSkNCg0KDQpkZWYgZ2VuZXJhdGVfZm9sZGVyKHZpZGVvX2lkLCBrZXl3b3JkKToNCiAgICBmb2xkZXJfbmFtZSA9IFsidmlkZW9zIiwga2V5d29yZF0NCiAgICAjIGNvdW50IDIgY2FyYWN0ZXJzIHRvIGNyZWF0ZSBzdWJmb2xkZXINCiAgICBmb3IgaSBpbiByYW5nZSgwLCBsZW4odmlkZW9faWQpLCAyKToNCiAgICAgICAgIyBDaGVjayBpZiB0aGUgcmVtYWluaW5nIGNoYXJhY3RlcnMgYXJlIGxlc3MgdGhhbiAyDQogICAgICAgIGlmIGkgKyAxID09IGxlbih2aWRlb19pZCk6DQogICAgICAgICAgICAjIFJlYWQgb25seSB0aGUgbGFzdCBjaGFyYWN0ZXINCiAgICAgICAgICAgIGNoYXIgPSB2aWRlb19pZFtpXQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgIyBSZWFkIDIgY2hhcmFjdGVycyBhdCBhIHRpbWUNCiAgICAgICAgICAgIGNoYXIgPSB2aWRlb19pZFtpIDogaSArIDJdDQoNCiAgICAgICAgZm9sZGVyX25hbWUuYXBwZW5kKGNoYXIpDQoNCiAgICByZXR1cm4gIi8iLmpvaW4oZm9sZGVyX25hbWUpDQoNCg0KZGVmIGhhbmRsZXIoY29udGV4dCwgZXZlbnQpOg0KICAgIHByaW50KGV2ZW50KQ0KDQogICAgZGF0YSA9IGpzb24ubG9hZHMoZXZlbnQuYm9keS5kZWNvZGUoInV0Zi04IikpDQogICAgdmlkZW9faWQgPSBkYXRhWyJ2aWRlb19pZCJdDQogICAga2V5d29yZCA9IGRhdGFbImtleXdvcmQiXQ0KDQogICAgc2VhcmNoX2luZm8gPSB7DQogICAgICAgICJwYXJ0IjogWyJpZCIsICJzbmlwcGV0IiwgInJlcGxpZXMiXSwNCiAgICAgICAgInZpZGVvSWQiOiB2aWRlb19pZCwNCiAgICAgICAgInRleHRGb3JtYXQiOiAicGxhaW5UZXh0IiwNCiAgICAgICAgIm1heFJlc3VsdHMiOiAxMDAsDQogICAgICAgICJvcmRlciI6ICJ0aW1lIiwNCiAgICAgICAgInBhZ2VzIjogMCwNCiAgICB9DQoNCiAgICBueFBhZ2UgPSAic3RhcnQiDQoNCiAgICB3aGlsZSBueFBhZ2UgIT0gIiI6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGlmIG54UGFnZSA9PSAic3RhcnQiOg0KICAgICAgICAgICAgICAgIGNvbW1lbnRfdGhyZWFkcyA9ICgNCiAgICAgICAgICAgICAgICAgICAgY29udGV4dC55b3V0dWJlLmNvbW1lbnRUaHJlYWRzKCkNCiAgICAgICAgICAgICAgICAgICAgLmxpc3QoDQogICAgICAgICAgICAgICAgICAgICAgICBwYXJ0PXNlYXJjaF9pbmZvWyJwYXJ0Il0sDQogICAgICAgICAgICAgICAgICAgICAgICB2aWRlb0lkPXNlYXJjaF9pbmZvWyJ2aWRlb0lkIl0sDQogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Rm9ybWF0PXNlYXJjaF9pbmZvWyJ0ZXh0Rm9ybWF0Il0sDQogICAgICAgICAgICAgICAgICAgICAgICBtYXhSZXN1bHRzPXNlYXJjaF9pbmZvWyJtYXhSZXN1bHRzIl0sDQogICAgICAgICAgICAgICAgICAgICAgICBvcmRlcj1zZWFyY2hfaW5mb1sib3JkZXIiXSwNCiAgICAgICAgICAgICAgICAgICAgKQ0KICAgICAgICAgICAgICAgICAgICAuZXhlY3V0ZSgpDQogICAgICAgICAgICAgICAgKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBjb21tZW50X3RocmVhZHMgPSAoDQogICAgICAgICAgICAgICAgICAgIGNvbnRleHQueW91dHViZS5jb21tZW50VGhyZWFkcygpDQogICAgICAgICAgICAgICAgICAgIC5saXN0KA0KICAgICAgICAgICAgICAgICAgICAgICAgcGFydD1zZWFyY2hfaW5mb1sicGFydCJdLA0KICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9JZD1zZWFyY2hfaW5mb1sidmlkZW9JZCJdLA0KICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEZvcm1hdD1zZWFyY2hfaW5mb1sidGV4dEZvcm1hdCJdLA0KICAgICAgICAgICAgICAgICAgICAgICAgbWF4UmVzdWx0cz1zZWFyY2hfaW5mb1sibWF4UmVzdWx0cyJdLA0KICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXI9c2VhcmNoX2luZm9bIm9yZGVyIl0sDQogICAgICAgICAgICAgICAgICAgICAgICBwYWdlVG9rZW49bnhQYWdlLA0KICAgICAgICAgICAgICAgICAgICApDQogICAgICAgICAgICAgICAgICAgIC5leGVjdXRlKCkNCiAgICAgICAgICAgICAgICApDQoNCiAgICAgICAgICAgIGZpbGVfbmFtZSA9ICJwYWdlLXs6MDNkfS5qc29uIi5mb3JtYXQoc2VhcmNoX2luZm9bInBhZ2VzIl0pDQoNCiAgICAgICAgICAgIHdpdGggb3BlbihmaWxlX25hbWUsICJ3IiwgZW5jb2Rpbmc9InV0Zi04IikgYXMgZjoNCiAgICAgICAgICAgICAgICBqc29uLmR1bXAoY29tbWVudF90aHJlYWRzLCBmLCBlbnN1cmVfYXNjaWk9RmFsc2UsIGluZGVudD00KQ0KDQogICAgICAgICAgICBvYmplY3RfbmFtZSA9ICJ7fS97fS97fSIuZm9ybWF0KGdlbmVyYXRlX2ZvbGRlcih2aWRlb19pZCwga2V5d29yZCksICJjb21tZW50cyIsIGZpbGVfbmFtZSkNCiAgICAgICAgICAgIGNvbnRleHQuY2xpZW50LmZwdXRfb2JqZWN0KA0KICAgICAgICAgICAgICAgICJ2aWRlb3MiLCBvYmplY3RfbmFtZSwgZmlsZV9uYW1lLCBjb250ZW50X3R5cGU9ImFwcGxpY2F0aW9uL2pzb24iDQogICAgICAgICAgICApDQoNCiAgICAgICAgICAgIG9zLnJlbW92ZShmaWxlX25hbWUpDQoNCiAgICAgICAgICAgIGlmICJuZXh0UGFnZVRva2VuIiBpbiBjb21tZW50X3RocmVhZHMua2V5cygpOg0KICAgICAgICAgICAgICAgIG54UGFnZSA9IGNvbW1lbnRfdGhyZWFkc1sibmV4dFBhZ2VUb2tlbiJdDQogICAgICAgICAgICAgICAgc2VhcmNoX2luZm9bInBhZ2VzIl0gKz0gMQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBueFBhZ2UgPSAiIg0KDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgIG54UGFnZSA9ICIiDQogICAgICAgICAgICBwcmludChlKQ0KDQogICAgIyB1cGxvYWQgbWV0YQ0KICAgIA0KICAgIHRyeToNCiAgICAgICAgbWV0YV9maWxlID0gIm1ldGEuanNvbiINCiAgICAgICAgc2VhcmNoX2luZm9bInBhZ2VzIl0gKz0gMQ0KICAgICAgICB3aXRoIG9wZW4obWV0YV9maWxlLCAidyIsIGVuY29kaW5nPSJ1dGYtOCIpIGFzIGY6DQogICAgICAgICAgICBqc29uLmR1bXAoc2VhcmNoX2luZm8sIGYsIGVuc3VyZV9hc2NpaT1GYWxzZSwgaW5kZW50PTQpDQoNCiAgICAgICAgb2JqZWN0X25hbWUgPSAie30ve30ve30iLmZvcm1hdChnZW5lcmF0ZV9mb2xkZXIodmlkZW9faWQsIGtleXdvcmQpLCAiY29tbWVudHMiLCBtZXRhX2ZpbGUpDQogICAgICAgIGNvbnRleHQuY2xpZW50LmZwdXRfb2JqZWN0KA0KICAgICAgICAgICAgInZpZGVvcyIsIG9iamVjdF9uYW1lLCBtZXRhX2ZpbGUsIGNvbnRlbnRfdHlwZT0iYXBwbGljYXRpb24vanNvbiINCiAgICAgICAgKQ0KICAgICAgICBvcy5yZW1vdmUobWV0YV9maWxlKQ0KDQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICBwcmludChlKQ0K
    commands:
      - 'pip install kafka-python minio google-api-python-client'
    runtimeAttributes:
      repositories: []
    codeEntryType: sourceCode
    timestamp: 1699000112
  loggerSinks:
    - level: debug
  platform: {}
  securityContext: {}
  eventTimeout: ""
